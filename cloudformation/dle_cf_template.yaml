AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation template DLE_Instance_Host: Creates a single EC2 instance based on Database Lab Engine (DLE) AMI,
  configures DLE, launches the data retrieval process, eventually making it possible to create thin clones using DLE API, CLI, or UI.
  You will be billed for the AWS resources used if you create a stack from this template.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Amazon EC2 configuration"
        Parameters:
          - InstanceType
          - ZFSVolumeSize
          - SSHLocation
          - VPC
          - Subnet
          - KeyName
      - Label:
          default: "TLS certificate configuration"
        Parameters:
          - CertificateSubdomain
          - CertificateHostedZone
          - CertificateEmail
      -
        Label:
          default: "Source PostgreSQL parameters"
        Parameters:
          - SourceDatabaseSize
      -
        Label:
          default: "Advanced DLE configuration"
        Parameters:
           - DLEZFSDataSetsNumber
    ParameterLabels:
      KeyName:
        default: "Key pair"
      InstanceType:
        default: "Instance type"
      SSHLocation:
        default: "Connection source IP range"
      SourceDatabaseSize:
        default: "Total source database size in GiB"
      CertificateSubdomain:
        default: "Certificate subdomain"
      CertificateHostedZone:
        default: "Hosted zone"
      CertificateEmail:
        default: "Certificate email"
      DLEVerificationToken:
        default: "DLE verification token"
      DLEZFSDataSetsNumber:
        default: "Number of supported snapshots."
      VPC:
        default: "VPC security group"
      Subnet:
        default: "Subnet"
Parameters:
  Subnet:
    Description: Subnet to attach EC2 machine.
    Type: AWS::EC2::Subnet::Id
  VPC:
    Description: VPC to attach EC2 machine.
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: Can contain only ASCII characters and can not be empty.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Can contain only ASCII characters and can not be empty.
  InstanceType:
    Description: DLE EC2 instance type
    Type: String
    Default: m5.2xlarge
    AllowedValues:
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.8xlarge
      - r5.12xlarge
      - r5.16xlarge
      - r5.24xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.16xlarge
      - m5.24xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: CIDR in format x.x.x.x/32 to allow one specific IP address access, 0.0.0.0/0 to allow all IP addresses access, or another CIDR range
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  SourceDatabaseSize:
    Description: The size of the source databases used to calculate the size of EBS volume, in GiB
    Type: Number
    Default: 40
  CertificateSubdomain:
    Description: Subdomain to obtain a TLS certificate for (for example, dle). Leave it empty if you don't need SSL connection or don't have Route 53 hosted zone.
    Type: String
  CertificateHostedZone:
    Description: Hosted zone to obtain a TLS certificate for (for example, example.com). Leave it empty if you don't need SSL connection or don't have Route 53 hosted zone.
    Type: String
  CertificateEmail:
    Description: Email address for important account notifications about the issued TLS certificate. Leave it empty if you don't need SSL connection or don't have Route 53 hosted zone.
    Type: String
    AllowedPattern: '^$|[^\s@]+@[^\s@]+\.[^\s@]+'
    Default: ''
    ConstraintDescription: Must be a valid email of the form \'user@example.com\'
  DLEVerificationToken:
    Description: DLE verification token
    Type: String
    Default: "example-verification-token"
    MinLength: '9'
    MaxLength: '32'
  DLEZFSDataSetsNumber:
    Description: Number of database copies needed
    Type: Number
    Default: 2
    MinValue: 2
    MaxValue: 100
Mappings:
  AWSInstanceType2Arch:
    r5.large:
      Arch: HVM64
    r5.xlarge:
      Arch: HVM64
    r5.2xlarge:
      Arch: HVM64
    r5.4xlarge:
      Arch: HVM64
    r5.8xlarge:
      Arch: HVM64
    r5.12xlarge:
      Arch: HVM64
    r5.16xlarge:
      Arch: HVM64
    r5.24xlarge:
      Arch: HVM64
    m5.large:
      Arch: HVM64
    m5.xlarge:
      Arch: HVM64
    m5.2xlarge:
      Arch: HVM64
    m5.4xlarge:
      Arch: HVM64
    m5.8xlarge:
      Arch: HVM64
    m5.12xlarge:
      Arch: HVM64
    m5.16xlarge:
      Arch: HVM64
    m5.24xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    eu-north-1:
      HVM64: ami-0888261a1eacb636e
    ap-south-1:
      HVM64: ami-00539bfa7a6926e1b
    eu-west-3:
      HVM64: ami-038d1f1d1ef71112b
    eu-west-2:
      HVM64: ami-07c2bca027887871b
    eu-west-1:
      HVM64: ami-0e38f0f4f0acd49c2
    ap-northeast-3:
      HVM64: ami-01cd2976ef1688c25
    ap-northeast-2:
      HVM64: ami-049c608703690f99e
    ap-northeast-1:
      HVM64: ami-0cb59515cd67fdc93
    sa-east-1:
      HVM64: ami-0b3aeaa58412025de
    ca-central-1:
      HVM64: ami-075d0aae6fdd356b1
    ap-southeast-1:
      HVM64: ami-054e735ba76985f92
    ap-southeast-2:
      HVM64: ami-06558ef4fedcf3c2f
    eu-central-1:
      HVM64: ami-048a27a74e4c1239d
    us-east-1:
      HVM64: ami-0ed40b8023c788775
    us-east-2:
      HVM64: ami-0d6a0bd053962b66f
    us-west-1:
      HVM64: ami-0ef7453c037b624ec
    us-west-2:
      HVM64: ami-0bdf048f8e10f02eb
Conditions:
  CreateSubDomain:
    !Not [!Equals [!Ref CertificateHostedZone, '']]
  NotCreateSubDomain:
    !Not [Condition: CreateSubDomain]

Resources:
  IamSSMRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: "EC2 IAM role for SSM access"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
  EC2SSMInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - Ref: "IamSSMRole"
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [lambda.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  PowerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          var response = require('cfn-response');
          exports.handler = function(event, context) {
            var result = parseInt(event.ResourceProperties.Op1)*(parseInt(event.ResourceProperties.Op2)+2);
            response.send(event, context, response.SUCCESS, {Value: result});
          };
      Runtime: nodejs14.x
  SizeCalculate:
    Type: Custom::Power
    Properties:
      ServiceToken: !GetAtt PowerFunction.Arn
      Op1: !Ref SourceDatabaseSize
      Op2: !Ref DLEZFSDataSetsNumber

  ZFSVolume:
    Type: AWS::EC2::Volume
    DeletionPolicy: Snapshot
    Properties:
      Encrypted: True
      AvailabilityZone: !GetAtt DLEInstance.AvailabilityZone
      Size: !GetAtt SizeCalculate.Value
      Tags:
        -
          Key: Name
          Value: dle-zfs-volume
      VolumeType: gp2

  DLEInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref EC2SSMInstanceProfile
      SecurityGroupIds: !If
        - CreateSubDomain
        - - !GetAtt DLESecurityGroup.GroupId
          - !GetAtt DLEUISecurityGroup.GroupId
        - - !GetAtt DLESecurityGroup.GroupId
      KeyName: !Ref KeyName
      SubnetId: !Ref Subnet
      Tags:
        -
          Key: Name
          Value: "DLE Instance"
      UserData:
        Fn::Base64: !Sub |     # No more Fn::Join needed
          #!/bin/bash
          set -ex

          sleep 30

          # This code tested and works on Ubuntu 20.04 (current base AMI)
          disk=$(lsblk -e7 --output PATH,NAME,FSTYPE  --json | jq -r '.blockdevices[] | select(.children == null and .fstype == null) | .path ')

          sudo zpool create -f \
            -O compression=on \
            -O atime=off \
            -O recordsize=128k \
            -O logbias=throughput \
            -m /var/lib/dblab/dblab_pool \
            dblab_pool \
            $disk

          for i in {1..${DLEZFSDataSetsNumber}}; do
            sudo zfs create dblab_pool/dataset_$i
          done

          dle_config_path="/home/ubuntu/.dblab/engine/configs"
          dle_meta_path="/home/ubuntu/.dblab/engine/meta"
          postgres_conf_path="/home/ubuntu/.dblab/postgres_conf"
          dle_logs_path="/home/ubuntu/.dblab/engine/logs"

          yq e -i '
          .embeddedUI.host="" |
          .embeddedUI.dockerImage="registry.gitlab.com/postgres-ai/database-lab/ce-ui:$DLE_DOCKER_IMAGE_VERSION" |
          .server.verificationToken="${DLEVerificationToken}" |
          .poolManager.mountDir = "/var/lib/dblab/dblab_pool" |
          .retrieval.spec.logicalDump.options.dumpLocation="/var/lib/dblab/dblab_pool/dataset_1/dump/" |
          .retrieval.spec.logicalRestore.options.forceInit=true |
          .retrieval.spec.logicalRestore.options.dumpLocation="/var/lib/dblab/dblab_pool/dataset_1/dump/"
          ' $dle_config_path/server.yml


          touch $dle_meta_path/pending.retrieval

          sudo docker run \
            --detach \
            --name dblab_server \
            --label dblab_control \
            --privileged \
            --publish 2345:2345 \
            --volume /var/run/docker.sock:/var/run/docker.sock \
            --volume /var/lib/dblab:/var/lib/dblab/:rshared \
            --volume /var/lib/dblab/dblab_pool/dataset_1/dump/:/var/lib/dblab/dblab_pool/dataset_1/dump/:rshared \
            --volume $dle_config_path:/home/dblab/configs \
            --volume $dle_meta_path:/home/dblab/meta \
            --volume $dle_logs_path:/home/dblab/logs \
            --volume $postgres_conf_path:/home/dblab/standard/postgres/control \
            --volume /sys/kernel/debug:/sys/kernel/debug:rw \
            --volume /lib/modules:/lib/modules:ro \
            --volume /proc:/host_proc:ro \
            --env DLE_COMPUTING_INFRASTRUCTURE=AWS \
            --env DOCKER_API_VERSION=1.39 \
            --restart always \
            registry.gitlab.com/postgres-ai/database-lab/dblab-server:$DLE_DOCKER_IMAGE_VERSION

          if [ ! -z "${CertificateHostedZone}" ]; then
            export DOMAIN=${CertificateSubdomain}.${CertificateHostedZone}
            export USER_EMAIL=${CertificateEmail}
            export CERTIFICATE_EMAIL=${!USER_EMAIL:-'noreply@'$DOMAIN}
          
            yq e -i '.cloning.accessHost="$DOMAIN"' $dle_config_path/server.yml

            sudo certbot certonly --standalone -d $DOMAIN -m $CERTIFICATE_EMAIL --agree-tos -n
            sudo cp /etc/letsencrypt/live/$DOMAIN/fullchain.pem /etc/envoy/certs/fullchain1.pem
            sudo cp /etc/letsencrypt/live/$DOMAIN/privkey.pem /etc/envoy/certs/privkey1.pem

          cat <<EOF > /etc/letsencrypt/renewal-hooks/deploy/envoy.deploy
          #!/bin/bash
          umask 0177
          export DOMAIN=${CertificateSubdomain}.${CertificateHostedZone}
          export DATA_DIR=/etc/envoy/certs/
          cp /etc/letsencrypt/live/$DOMAIN/fullchain.pem $DATA_DIR/fullchain1.pem
          cp /etc/letsencrypt/live/$DOMAIN/privkey.pem   $DATA_DIR/privkey1.pem
          EOF
            sudo chmod +x /etc/letsencrypt/renewal-hooks/deploy/envoy.deploy

            sudo systemctl enable envoy
            sudo systemctl start envoy
          fi

          # upgrade ssm agent version
          wget https://s3.us-east-1.amazonaws.com/amazon-ssm-us-east-1/amazon-ssm-agent/3.1.1575.0/amazon-ssm-agent-ubuntu-amd64.tar.gz
          tar -xf amazon-ssm-agent-ubuntu-amd64.tar.gz
          bash snap-install.sh

          # Initialize CLI configuration
          su ubuntu -c '/usr/local/bin/dblab init \
           --environment-id=test \
           --url=http://localhost:2345 \
           --token=${DLEVerificationToken} \
           --insecure'

          # Start Netdata

          touch $dle_config_path/netdata_DLE.conf
          echo  "DLE_token=${DLEVerificationToken}"> $dle_config_path/netdata_DLE.conf
          
          sudo docker run -d \
            --name=netdata \
            --network host \
            --hostname=$(hostname) \
            -p 19999:19999 \
            -v netdataconfig:/etc/netdata \
            -v $dle_config_path/netdata_DLE.conf:/etc/netdata/charts.d/DLE.conf \
            -v netdatalib:/var/lib/netdata \
            -v netdatacache:/var/cache/netdata \
            -v /proc:/host/proc:ro \
            -v /sys:/host/sys:ro \
            -v /etc/os-release:/host/etc/os-release:ro \
            --restart unless-stopped \
            --cap-add SYS_PTRACE \
            --security-opt apparmor=unconfined \
            postgresai/netdata-for-dle:v1.34.1

          while ! echo "UI started" | nc localhost 2346; do sleep 10; done
          /opt/aws/bin/cfn-signal -e $? -d "DLE UI is available" -r "DLE Deploy Process Complete" '${WaitHandle}'

  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: DLEInstance
    Properties:
      Handle: !Ref 'WaitHandle'
      Timeout: '600'

  MountPoint:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref DLEInstance
      VolumeId: !Ref ZFSVolume
      Device: /dev/xvdh

  DLEElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref DLEInstance

  SubDomain:
    Type: AWS::Route53::RecordSet
    Condition: CreateSubDomain
    Properties:
      HostedZoneName: !Sub '${CertificateHostedZone}.'
      Comment: DNS name for DLE instance.
      Name: !Sub '${CertificateSubdomain}.${CertificateHostedZone}'
      Type: CNAME
      TTL: 60
      ResourceRecords:
        - !GetAtt DLEInstance.PublicDnsName
    DependsOn:
      - DLEInstance
      - DLEElasticIP

  DLESecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable ssh access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref VPC

  DLEUISecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Condition: CreateSubDomain
    Properties:
      GroupDescription: Enable ports to access DLE UI
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref SSHLocation

        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref SSHLocation

        - IpProtocol: tcp
          FromPort: 446
          ToPort: 446
          CidrIp: !Ref SSHLocation
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref VPC

Outputs:
  02VerificationToken:
    Description: 'DLE verification token'
    Value: !Ref DLEVerificationToken

  08DLEInstance:
    Description: URL for newly created DLE instance
    Value: !Sub 'https://${CertificateSubdomain}.${CertificateHostedZone}'
    Condition: CreateSubDomain

  01WebUIUrl:
    Description: UI URL with a domain for newly created DLE instance
    Value: !Sub 'https://${CertificateSubdomain}.${CertificateHostedZone}:446'
    Condition: CreateSubDomain
  01WebUIUrlLocal:
    Description: UI URL for newly created DLE instance
    Value: !Sub 'http://localhost:2346'
    Condition: NotCreateSubDomain

  07EBSVolumeSize:
    Description: Size of provisioned EBS volume
    Value: !GetAtt SizeCalculate.Value

  03DNSName:
    Description: Public DNS name
    Value: !GetAtt DLEInstance.PublicDnsName

  06EC2SSH:
    Description: SSH connection to the EC2 instance with Database Lab Engine
    Value: !Sub
      - 'ssh ubuntu@${DNSName} -i YOUR_PRIVATE_KEY'
      - DNSName: !GetAtt DLEInstance.PublicDnsName

  05DLETunnel:
    Description: Create an SSH-tunnel to Database Lab Engine
    Value: !Sub
      - 'ssh -N -L 2345:${DNSName}:2345 ubuntu@${DNSName} -i YOUR_PRIVATE_KEY'
      - DNSName: !GetAtt DLEInstance.PublicDnsName

  00UITunnel:
    Description: Use SSH port forwarding to be able to access DLE UI
    Value: !Sub
      - 'ssh -N -L 2346:${DNSName}:2346 ubuntu@${DNSName} -i YOUR_PRIVATE_KEY'
      - DNSName: !GetAtt DLEInstance.PublicDnsName

  07NetdataTunnel:
    Description: Use SSH port forwarding to be able to access monitoring (Netdata)
    Value: !Sub
      - 'ssh -N -L 19999:${DNSName}:19999 ubuntu@${DNSName} -i YOUR_PRIVATE_KEY'
      - DNSName: !GetAtt DLEInstance.PublicDnsName
  08NetdataUrl:
    Description: Netdata URL with a domain for newly created DLE instance
    Value: !Sub 'https://${CertificateSubdomain}.${CertificateHostedZone}:19999'
    Condition: CreateSubDomain
  08NetdataUrlLocal:
    Description: Netdata URL without a domain for newly created DLE instance
    Value: !Sub 'http://localhost:19999'
    Condition: NotCreateSubDomain

  04CloneTunnel:
    Description: Use SSH port forwarding to be able to access a database clone
    Value: !Sub
      - 'ssh -N -L CLONE_PORT:${DNSName}:CLONE_PORT ubuntu@${DNSName} -i YOUR_PRIVATE_KEY'
      - DNSName: !GetAtt DLEInstance.PublicDnsName
